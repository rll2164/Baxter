	def motion_plan(self, q_start, q_goal, q_min, q_max):
    	# ---------------- replace this with your code ------------------

    # Steps to accomplish:
    #	1) generate random points
    #	2) if any point takes us into obstacle, ignore it
    #	3) generate random points until we can connect to the goal
    #	4) check validity of trajectory using is_state_valid
    
    num_joints = len(q_min)
    tree = []
    tree.append(q_start)
    # connect the most recent point in the tree to the goal
    q_goal_difference = []
    n = len(tree)
    for i in range(0, num_joints):
    	q_goal_difference.append(q_goal[i]-tree[n-1][i])  # calculate the difference from the q_goal to q for the most recent tree point

    #Check if GOAL connection is valid by splitting the 7-dimensional "line" into points a distance of 0.1 apart, and testing validity of points
    q_goal_difference_magnitude = (q_goal_difference[0]**2+q_goal_difference[1]**2+q_goal_difference[2]**2+q_goal_difference[3]**2+q_goal_difference[4]**2+q_goal_difference[5]**2+q_goal_difference[6]**2)**(1/2)
    increment = 0.1
    # scale the segment to length of 0.1    
    scale = increment/q_difference_magnitude
    q_goal_difference_increment = []
    for i in range(0, num_joints):
    	q_goal_difference_increment.append(q_goal_difference[i]*scale)
    # q_goal_difference_increment is a segment of length 0.1, oriented along the direction from the most recent tree point towards q_goal
    # while point is on the 7-dimensional line, test validity of point, then increment    
    q_test = tree[n-1][i]
    validity = "true"
    while (magnitude of (q_goal - q_test) >= 0.1 and validity = 'true'):   	 #continue while loop as long as we are still on the segment
    	for i in range(0, num_joints): 				 # assemble next point by incrementing by length 0.1
        	q_test[i] = q_test[i] + q_goal_difference_increment[i]
    	validity = self.is_state_valid(self, q_test)
    	if (validity = 'true' and magnitude of (q_goal - q_test) < 0.1):
        	tree.append(q_goal)   			 # add q_goal to the tree as the next and last trajectory point
        	validity = 'false' 				 # exit the loop
           	 


    #while tree cannot connect to goal
    for i in range(0, num_joints):
    	q_next[i] = q_min[i] + random.random()*(q_max[i]-q_min[i])
    q_difference = []
    for i in range(0, num_joints):
    	q_difference.append(q_next[i]-tree[0][i])

    #Check if NEXT BRANCH connection is valid by splitting the 7-dimensional "line" into points a distance of 0.1 apart, and testing validity of points
    q_difference_magnitude = (q_difference[0]**2+q_difference[1]**2+q_difference[2]**2+q_difference[3]**2+q_difference[4]**2+q_difference[5]**2+q_difference[6]**2)**(1/2)
    segment_length = 0.5
    increment = 0.1
    # scale the segment to pre-defined length of 0.5    
    scale = segment_length/q_difference_magnitude
    q_difference_scaled = []
    for i in range(0, num_joints):
    	q_difference_scaled.append(q_difference[i]*scale)
    # q_difference_scaled is now a segment of length 0.5, oriented along the direction from the most recent tree point towards q_goal
    # Split q_difference_scaled into 5 points. Test validity of each point    
    k = 0.1
    validity = 'true'
    q_test = q_start
    while (k <= 0.5 and validity = 'true'):    #continue while loop for each of the 5 points of the segment AND while the last point checked is valid
    	for i in range(0, num_joints):  # assemble next point by incrementing by length 0.1
        	q_test[i] = q_test[i] + q_difference_scaled[i]/(segment_length/increment)
    	validity = self.is_state_valid(self, q_test)
    	if validity = 'true' and k = 0.5:
            	tree.append(q_next)     # add q_next to the tree as the next trajectory point
    	k = k + 0.1   		 # increment the counter

       
   	 



"""
    i = 0
    random_s0 = q_min[i] + random.random()*(q_max[i]-q_min[i])
    i = i+1
    random_s1 = q_min[i] + random.random()*(q_max[i]-q_min[i])
    i = i+1
    random_e0 = q_min[i] + random.random()*(q_max[i]-q_min[i])
    i = i+1
    random_e1 = q_min[i] + random.random()*(q_max[i]-q_min[i])
    i = i+1
    random_w0 = q_min[i] + random.random()*(q_max[i]-q_min[i])
    i = i+1
    random_w1 = q_min[i] + random.random()*(q_max[i]-q_min[i])
    i = i+1
    random_w2 = q_min[i] + random.random()*(q_max[i]-q_min[i])
"""
 

    	# This simple example creates a trajectory with just the start and goal points
    	q_list = []
    	q_list.append(q_start)
    	q_list.append(q_goal)
    	print "Example q_list:"
    	print q_list
    	# A provided convenience function creates the velocity and acceleration data,
    	# assuming 0 velocity and acceleration at each intermediate point, and 10 seconds
    	# for each trajectory segment.
    	v_list,a_list,t = self.compute_simple_timing(q_list, 10)
    	print "Example v_list and a_list:"
    	print v_list
    	print a_list
    	print "Example t:"
    	print t
    	return q_list, v_list, a_list, t
    	# ---------------------------------------------------------------
